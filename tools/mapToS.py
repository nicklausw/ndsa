#!/usr/bin/env python3
import sys
import os
import xml.etree.ElementTree as ET
if len(sys.argv) != 3:
  print("usage: " + sys.argv[0] + " (tmx file) (s output)")
  sys.exit(1)
count = 0
head, tail = os.path.split(sys.argv[1])
variableName = tail.removesuffix(".tmx")

rawData = []
smallestInt = 100000
xmlDat = ET.parse(sys.argv[1]).getroot()

rawWidth = int(xmlDat.attrib["width"])
rawHeight = int(xmlDat.attrib["height"])
if rawWidth % 32 != 0:
  sys.stderr.write("error: " + tail + ": width of map must be divisible by 32\n")
  sys.exit(1)
if rawHeight % 32 != 0:
  sys.stderr.write("error: " + tail + ": height of map must be divisible by 32\n")
  sys.exit(1)

rawText = xmlDat.find("layer").find("data").text
lines = rawText.split("\n")
for line in lines:
  if(len(line)):
    nums = line.split(",")
    for num in nums:
      if len(num):
        count += 1
        newNum = int(num)
        rawData.append(newNum)
        if newNum < smallestInt:
          smallestInt = newNum

output = (
  "@ generated by mapToS.py\n"
  "@ data size = " + str(count * 2 + 4) + " bytes\n\n"
  ".section .rodata\n"
  ".align 4\n\n"
  ".global " + variableName + "MapLen\n"
  ".hidden " + variableName + "MapLen\n"
  + variableName + "MapLen:\n"
  ".long " + "0x{:08X}".format(count * 2) + "\n\n"
  ".global " + variableName + "Map\n"
  ".hidden " + variableName + "Map\n" + variableName + "Map:\n"
)

listWidth = int(rawWidth / 32)
listHeight = int(rawHeight / 32)

columnBase = 0
rowBase = 0
outData = []

for row in range(0, listHeight):
  rowBase = 0
  for column in range(0, listWidth):
    for x in range(0,32):
      for y in range(0,32):
        outData.append(rawData[columnBase + (x * listWidth * 32) + rowBase + y])
    rowBase += 32
  columnBase += (listWidth * 32 * 32) 

counter = 0
for num in outData:
  if counter == 0:
    output += ".hword "
  output += "0x{:04X}".format(num - smallestInt)
  counter += 1
  if counter == 8:
    output += "\n"
    counter = 0
  else:
    output += ","
output += "\n"

text_file = open(sys.argv[2], "w")
text_file.write(output)
text_file.close()